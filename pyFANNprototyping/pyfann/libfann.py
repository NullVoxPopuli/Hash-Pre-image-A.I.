# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _libfann
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _libfann.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _libfann.PySwigIterator_value(*args)
    def incr(*args): return _libfann.PySwigIterator_incr(*args)
    def decr(*args): return _libfann.PySwigIterator_decr(*args)
    def distance(*args): return _libfann.PySwigIterator_distance(*args)
    def equal(*args): return _libfann.PySwigIterator_equal(*args)
    def copy(*args): return _libfann.PySwigIterator_copy(*args)
    def next(*args): return _libfann.PySwigIterator_next(*args)
    def previous(*args): return _libfann.PySwigIterator_previous(*args)
    def advance(*args): return _libfann.PySwigIterator_advance(*args)
    def __eq__(*args): return _libfann.PySwigIterator___eq__(*args)
    def __ne__(*args): return _libfann.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _libfann.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _libfann.PySwigIterator___isub__(*args)
    def __add__(*args): return _libfann.PySwigIterator___add__(*args)
    def __sub__(*args): return _libfann.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _libfann.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

ERRORFUNC_LINEAR = _libfann.ERRORFUNC_LINEAR
ERRORFUNC_TANH = _libfann.ERRORFUNC_TANH
STOPFUNC_MSE = _libfann.STOPFUNC_MSE
STOPFUNC_BIT = _libfann.STOPFUNC_BIT
TRAIN_INCREMENTAL = _libfann.TRAIN_INCREMENTAL
TRAIN_BATCH = _libfann.TRAIN_BATCH
TRAIN_RPROP = _libfann.TRAIN_RPROP
TRAIN_QUICKPROP = _libfann.TRAIN_QUICKPROP
LINEAR = _libfann.LINEAR
THRESHOLD = _libfann.THRESHOLD
THRESHOLD_SYMMETRIC = _libfann.THRESHOLD_SYMMETRIC
SIGMOID = _libfann.SIGMOID
SIGMOID_STEPWISE = _libfann.SIGMOID_STEPWISE
SIGMOID_SYMMETRIC = _libfann.SIGMOID_SYMMETRIC
SIGMOID_SYMMETRIC_STEPWISE = _libfann.SIGMOID_SYMMETRIC_STEPWISE
GAUSSIAN = _libfann.GAUSSIAN
GAUSSIAN_SYMMETRIC = _libfann.GAUSSIAN_SYMMETRIC
GAUSSIAN_STEPWISE = _libfann.GAUSSIAN_STEPWISE
ELLIOT = _libfann.ELLIOT
ELLIOT_SYMMETRIC = _libfann.ELLIOT_SYMMETRIC
LINEAR_PIECE = _libfann.LINEAR_PIECE
LINEAR_PIECE_SYMMETRIC = _libfann.LINEAR_PIECE_SYMMETRIC
SIN_SYMMETRIC = _libfann.SIN_SYMMETRIC
COS_SYMMETRIC = _libfann.COS_SYMMETRIC
LAYER = _libfann.LAYER
SHORTCUT = _libfann.SHORTCUT
class training_data_parent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, training_data_parent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, training_data_parent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libfann.new_training_data_parent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libfann.delete_training_data_parent
    __del__ = lambda self : None;
    def destroy_train(*args): return _libfann.training_data_parent_destroy_train(*args)
    def read_train_from_file(*args): return _libfann.training_data_parent_read_train_from_file(*args)
    def save_train(*args): return _libfann.training_data_parent_save_train(*args)
    def save_train_to_fixed(*args): return _libfann.training_data_parent_save_train_to_fixed(*args)
    def shuffle_train_data(*args): return _libfann.training_data_parent_shuffle_train_data(*args)
    def merge_train_data(*args): return _libfann.training_data_parent_merge_train_data(*args)
    def length_train_data(*args): return _libfann.training_data_parent_length_train_data(*args)
    def num_input_train_data(*args): return _libfann.training_data_parent_num_input_train_data(*args)
    def num_output_train_data(*args): return _libfann.training_data_parent_num_output_train_data(*args)
    def get_input(*args): return _libfann.training_data_parent_get_input(*args)
    def get_output(*args): return _libfann.training_data_parent_get_output(*args)
    def set_train_data(*args): return _libfann.training_data_parent_set_train_data(*args)
    def create_train_from_callback(*args): return _libfann.training_data_parent_create_train_from_callback(*args)
    def scale_input_train_data(*args): return _libfann.training_data_parent_scale_input_train_data(*args)
    def scale_output_train_data(*args): return _libfann.training_data_parent_scale_output_train_data(*args)
    def scale_train_data(*args): return _libfann.training_data_parent_scale_train_data(*args)
    def subset_train_data(*args): return _libfann.training_data_parent_subset_train_data(*args)
training_data_parent_swigregister = _libfann.training_data_parent_swigregister
training_data_parent_swigregister(training_data_parent)

class neural_net_parent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, neural_net_parent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, neural_net_parent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libfann.new_neural_net_parent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libfann.delete_neural_net_parent
    __del__ = lambda self : None;
    def destroy(*args): return _libfann.neural_net_parent_destroy(*args)
    def create_standard(*args): return _libfann.neural_net_parent_create_standard(*args)
    def create_standard_array(*args): return _libfann.neural_net_parent_create_standard_array(*args)
    def create_sparse(*args): return _libfann.neural_net_parent_create_sparse(*args)
    def create_sparse_array(*args): return _libfann.neural_net_parent_create_sparse_array(*args)
    def create_shortcut(*args): return _libfann.neural_net_parent_create_shortcut(*args)
    def create_shortcut_array(*args): return _libfann.neural_net_parent_create_shortcut_array(*args)
    def run(*args): return _libfann.neural_net_parent_run(*args)
    def randomize_weights(*args): return _libfann.neural_net_parent_randomize_weights(*args)
    def init_weights(*args): return _libfann.neural_net_parent_init_weights(*args)
    def print_connections(*args): return _libfann.neural_net_parent_print_connections(*args)
    def create_from_file(*args): return _libfann.neural_net_parent_create_from_file(*args)
    def save(*args): return _libfann.neural_net_parent_save(*args)
    def save_to_fixed(*args): return _libfann.neural_net_parent_save_to_fixed(*args)
    def train(*args): return _libfann.neural_net_parent_train(*args)
    def train_epoch(*args): return _libfann.neural_net_parent_train_epoch(*args)
    def train_on_data(*args): return _libfann.neural_net_parent_train_on_data(*args)
    def train_on_file(*args): return _libfann.neural_net_parent_train_on_file(*args)
    def test(*args): return _libfann.neural_net_parent_test(*args)
    def test_data(*args): return _libfann.neural_net_parent_test_data(*args)
    def get_MSE(*args): return _libfann.neural_net_parent_get_MSE(*args)
    def reset_MSE(*args): return _libfann.neural_net_parent_reset_MSE(*args)
    def set_callback(*args): return _libfann.neural_net_parent_set_callback(*args)
    def print_parameters(*args): return _libfann.neural_net_parent_print_parameters(*args)
    def get_training_algorithm(*args): return _libfann.neural_net_parent_get_training_algorithm(*args)
    def set_training_algorithm(*args): return _libfann.neural_net_parent_set_training_algorithm(*args)
    def get_learning_rate(*args): return _libfann.neural_net_parent_get_learning_rate(*args)
    def set_learning_rate(*args): return _libfann.neural_net_parent_set_learning_rate(*args)
    def get_activation_function(*args): return _libfann.neural_net_parent_get_activation_function(*args)
    def set_activation_function(*args): return _libfann.neural_net_parent_set_activation_function(*args)
    def set_activation_function_layer(*args): return _libfann.neural_net_parent_set_activation_function_layer(*args)
    def set_activation_function_hidden(*args): return _libfann.neural_net_parent_set_activation_function_hidden(*args)
    def set_activation_function_output(*args): return _libfann.neural_net_parent_set_activation_function_output(*args)
    def get_activation_steepness(*args): return _libfann.neural_net_parent_get_activation_steepness(*args)
    def set_activation_steepness(*args): return _libfann.neural_net_parent_set_activation_steepness(*args)
    def set_activation_steepness_layer(*args): return _libfann.neural_net_parent_set_activation_steepness_layer(*args)
    def set_activation_steepness_hidden(*args): return _libfann.neural_net_parent_set_activation_steepness_hidden(*args)
    def set_activation_steepness_output(*args): return _libfann.neural_net_parent_set_activation_steepness_output(*args)
    def get_train_error_function(*args): return _libfann.neural_net_parent_get_train_error_function(*args)
    def set_train_error_function(*args): return _libfann.neural_net_parent_set_train_error_function(*args)
    def get_quickprop_decay(*args): return _libfann.neural_net_parent_get_quickprop_decay(*args)
    def set_quickprop_decay(*args): return _libfann.neural_net_parent_set_quickprop_decay(*args)
    def get_quickprop_mu(*args): return _libfann.neural_net_parent_get_quickprop_mu(*args)
    def set_quickprop_mu(*args): return _libfann.neural_net_parent_set_quickprop_mu(*args)
    def get_rprop_increase_factor(*args): return _libfann.neural_net_parent_get_rprop_increase_factor(*args)
    def set_rprop_increase_factor(*args): return _libfann.neural_net_parent_set_rprop_increase_factor(*args)
    def get_rprop_decrease_factor(*args): return _libfann.neural_net_parent_get_rprop_decrease_factor(*args)
    def set_rprop_decrease_factor(*args): return _libfann.neural_net_parent_set_rprop_decrease_factor(*args)
    def get_rprop_delta_min(*args): return _libfann.neural_net_parent_get_rprop_delta_min(*args)
    def set_rprop_delta_min(*args): return _libfann.neural_net_parent_set_rprop_delta_min(*args)
    def get_rprop_delta_max(*args): return _libfann.neural_net_parent_get_rprop_delta_max(*args)
    def set_rprop_delta_max(*args): return _libfann.neural_net_parent_set_rprop_delta_max(*args)
    def get_num_input(*args): return _libfann.neural_net_parent_get_num_input(*args)
    def get_num_output(*args): return _libfann.neural_net_parent_get_num_output(*args)
    def get_total_neurons(*args): return _libfann.neural_net_parent_get_total_neurons(*args)
    def get_total_connections(*args): return _libfann.neural_net_parent_get_total_connections(*args)
    def get_network_type(*args): return _libfann.neural_net_parent_get_network_type(*args)
    def get_connection_rate(*args): return _libfann.neural_net_parent_get_connection_rate(*args)
    def get_num_layers(*args): return _libfann.neural_net_parent_get_num_layers(*args)
    def get_layer_array(*args): return _libfann.neural_net_parent_get_layer_array(*args)
    def get_bias_array(*args): return _libfann.neural_net_parent_get_bias_array(*args)
    def get_connection_array(*args): return _libfann.neural_net_parent_get_connection_array(*args)
    def set_weight_array(*args): return _libfann.neural_net_parent_set_weight_array(*args)
    def set_weight(*args): return _libfann.neural_net_parent_set_weight(*args)
    def get_learning_momentum(*args): return _libfann.neural_net_parent_get_learning_momentum(*args)
    def set_learning_momentum(*args): return _libfann.neural_net_parent_set_learning_momentum(*args)
    def get_train_stop_function(*args): return _libfann.neural_net_parent_get_train_stop_function(*args)
    def set_train_stop_function(*args): return _libfann.neural_net_parent_set_train_stop_function(*args)
    def get_bit_fail_limit(*args): return _libfann.neural_net_parent_get_bit_fail_limit(*args)
    def set_bit_fail_limit(*args): return _libfann.neural_net_parent_set_bit_fail_limit(*args)
    def get_bit_fail(*args): return _libfann.neural_net_parent_get_bit_fail(*args)
    def cascadetrain_on_data(*args): return _libfann.neural_net_parent_cascadetrain_on_data(*args)
    def cascadetrain_on_file(*args): return _libfann.neural_net_parent_cascadetrain_on_file(*args)
    def get_cascade_output_change_fraction(*args): return _libfann.neural_net_parent_get_cascade_output_change_fraction(*args)
    def set_cascade_output_change_fraction(*args): return _libfann.neural_net_parent_set_cascade_output_change_fraction(*args)
    def get_cascade_output_stagnation_epochs(*args): return _libfann.neural_net_parent_get_cascade_output_stagnation_epochs(*args)
    def set_cascade_output_stagnation_epochs(*args): return _libfann.neural_net_parent_set_cascade_output_stagnation_epochs(*args)
    def get_cascade_candidate_change_fraction(*args): return _libfann.neural_net_parent_get_cascade_candidate_change_fraction(*args)
    def set_cascade_candidate_change_fraction(*args): return _libfann.neural_net_parent_set_cascade_candidate_change_fraction(*args)
    def get_cascade_candidate_stagnation_epochs(*args): return _libfann.neural_net_parent_get_cascade_candidate_stagnation_epochs(*args)
    def set_cascade_candidate_stagnation_epochs(*args): return _libfann.neural_net_parent_set_cascade_candidate_stagnation_epochs(*args)
    def get_cascade_weight_multiplier(*args): return _libfann.neural_net_parent_get_cascade_weight_multiplier(*args)
    def set_cascade_weight_multiplier(*args): return _libfann.neural_net_parent_set_cascade_weight_multiplier(*args)
    def get_cascade_candidate_limit(*args): return _libfann.neural_net_parent_get_cascade_candidate_limit(*args)
    def set_cascade_candidate_limit(*args): return _libfann.neural_net_parent_set_cascade_candidate_limit(*args)
    def get_cascade_max_out_epochs(*args): return _libfann.neural_net_parent_get_cascade_max_out_epochs(*args)
    def set_cascade_max_out_epochs(*args): return _libfann.neural_net_parent_set_cascade_max_out_epochs(*args)
    def get_cascade_max_cand_epochs(*args): return _libfann.neural_net_parent_get_cascade_max_cand_epochs(*args)
    def set_cascade_max_cand_epochs(*args): return _libfann.neural_net_parent_set_cascade_max_cand_epochs(*args)
    def get_cascade_num_candidates(*args): return _libfann.neural_net_parent_get_cascade_num_candidates(*args)
    def get_cascade_activation_functions_count(*args): return _libfann.neural_net_parent_get_cascade_activation_functions_count(*args)
    def get_cascade_activation_functions(*args): return _libfann.neural_net_parent_get_cascade_activation_functions(*args)
    def set_cascade_activation_functions(*args): return _libfann.neural_net_parent_set_cascade_activation_functions(*args)
    def get_cascade_activation_steepnesses_count(*args): return _libfann.neural_net_parent_get_cascade_activation_steepnesses_count(*args)
    def get_cascade_activation_steepnesses(*args): return _libfann.neural_net_parent_get_cascade_activation_steepnesses(*args)
    def set_cascade_activation_steepnesses(*args): return _libfann.neural_net_parent_set_cascade_activation_steepnesses(*args)
    def get_cascade_num_candidate_groups(*args): return _libfann.neural_net_parent_get_cascade_num_candidate_groups(*args)
    def set_cascade_num_candidate_groups(*args): return _libfann.neural_net_parent_set_cascade_num_candidate_groups(*args)
    def scale_train(*args): return _libfann.neural_net_parent_scale_train(*args)
    def descale_train(*args): return _libfann.neural_net_parent_descale_train(*args)
    def set_input_scaling_params(*args): return _libfann.neural_net_parent_set_input_scaling_params(*args)
    def set_output_scaling_params(*args): return _libfann.neural_net_parent_set_output_scaling_params(*args)
    def set_scaling_params(*args): return _libfann.neural_net_parent_set_scaling_params(*args)
    def clear_scaling_params(*args): return _libfann.neural_net_parent_clear_scaling_params(*args)
    def scale_input(*args): return _libfann.neural_net_parent_scale_input(*args)
    def scale_output(*args): return _libfann.neural_net_parent_scale_output(*args)
    def descale_input(*args): return _libfann.neural_net_parent_descale_input(*args)
    def descale_output(*args): return _libfann.neural_net_parent_descale_output(*args)
    def set_error_log(*args): return _libfann.neural_net_parent_set_error_log(*args)
    def get_errno(*args): return _libfann.neural_net_parent_get_errno(*args)
    def reset_errno(*args): return _libfann.neural_net_parent_reset_errno(*args)
    def reset_errstr(*args): return _libfann.neural_net_parent_reset_errstr(*args)
    def get_errstr(*args): return _libfann.neural_net_parent_get_errstr(*args)
    def print_error(*args): return _libfann.neural_net_parent_print_error(*args)
neural_net_parent_swigregister = _libfann.neural_net_parent_swigregister
neural_net_parent_swigregister(neural_net_parent)

class training_data(training_data_parent):
    __swig_setmethods__ = {}
    for _s in [training_data_parent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, training_data, name, value)
    __swig_getmethods__ = {}
    for _s in [training_data_parent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, training_data, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libfann.new_training_data(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libfann.delete_training_data
    __del__ = lambda self : None;
    def get_input(*args): return _libfann.training_data_get_input(*args)
    def get_output(*args): return _libfann.training_data_get_output(*args)
    def set_train_data(*args): return _libfann.training_data_set_train_data(*args)
training_data_swigregister = _libfann.training_data_swigregister
training_data_swigregister(training_data)

class neural_net(neural_net_parent):
    __swig_setmethods__ = {}
    for _s in [neural_net_parent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, neural_net, name, value)
    __swig_getmethods__ = {}
    for _s in [neural_net_parent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, neural_net, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libfann.new_neural_net(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libfann.delete_neural_net
    __del__ = lambda self : None;
    def create_standard_array(*args): return _libfann.neural_net_create_standard_array(*args)
    def create_sparse_array(*args): return _libfann.neural_net_create_sparse_array(*args)
    def create_shortcut_array(*args): return _libfann.neural_net_create_shortcut_array(*args)
    def run(*args): return _libfann.neural_net_run(*args)
    def train(*args): return _libfann.neural_net_train(*args)
    def test(*args): return _libfann.neural_net_test(*args)
    def get_layer_array(*args): return _libfann.neural_net_get_layer_array(*args)
    def get_bias_array(*args): return _libfann.neural_net_get_bias_array(*args)
    def get_connection_array(*args): return _libfann.neural_net_get_connection_array(*args)
    def set_weight_array(*args): return _libfann.neural_net_set_weight_array(*args)
    def get_cascade_activation_steepnesses(*args): return _libfann.neural_net_get_cascade_activation_steepnesses(*args)
    def set_cascade_activation_steepnesses(*args): return _libfann.neural_net_set_cascade_activation_steepnesses(*args)
neural_net_swigregister = _libfann.neural_net_swigregister
neural_net_swigregister(neural_net)



